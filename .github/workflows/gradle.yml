# This workflow uses actions that are not certified by GitHub.
# They are provided by a third-party and are governed by
# separate terms of service, privacy policy, and support
# documentation.
# This workflow will build a Java project with Gradle and cache/restore any dependencies to improve the workflow execution time
# For more information see: https://help.github.com/actions/language-and-framework-guides/building-and-testing-java-with-gradle

name: Java CI with Gradle

# 해당 workflow가 언제 실행될건지 트리거 지정(Event Trigger)
# master branch에 push or pull request가 발생할 경우 동작함
on:
  push:
    branches: [ master ]
  pull_request:
    branches: [ master ]

jobs:
  build:
    #실행 환경 지정
    runs-on: ubuntu-latest
    
    # Task의 sequance 명시함
    steps:
    
    - uses: actions/checkout@v2
    - name: Set up JDK 11
      uses: actions/setup-java@v2
      with:
        java-version: '11'
        distribution: 'temurin'

    - name: Setup MySQL
      uses: mirromutth/mysql-action@v1.1
      with:
        container port: 3306
        mysql database: 'svtcafe'
        mysql user: ${{ secrets.MYSQL_USERNAME }}
        mysql root password: ${{ secrets.MYSQL_PASSWORD }}
        mysql password: ${{ secrets.MYSQL_PASSWORD }}
        
    - name: Make MYSQL properties
      env:
        MYSQL_USERNAME: ${{ secrets.MYSQL_USERNAME }}
        MYSQL_PASSWORD: ${{ secrets.MYSQL_PASSWORD }}
        MYSQL_URL: ${{ secrets.MYSQL_URL }}
        SECRET_DIR: src/main/resources
        FILE_NAME: application-test.properties
      run: |
        echo "spring.datasource.driver-class-name=com.mysql.cj.jdbc.Driver"
        echo "spring.datasource.url=$MYSQL_URL" >> $SECRET_DIR/$FILE_NAME
        echo "spring.datasource.username=$MYSQL_USERNAME" >> $SECRET_DIR/$FILE_NAME
        echo "spring.datasource.password=$MYSQL_PASSWORD" >> $SECRET_DIR/$FILE_NAME

    - name: Make AWS AWS properties
      env:
        AWS_RDS_URL: ${{ secrets.AWS_RDS_URL }}
        AWS_RDS_USERNAME: ${{ secrets.AWS_RDS_USERNAME }}
        AWS_RDS_PASSWORD: ${{ secrets.AWS_RDS_PASSWORD }}
  
        AWS_ACCESS_KEY: ${{ secrets.AWS_IAM_ACCESS_ID }}
        AWS_SECRET_KEY: ${{ secrets.AWS_IAM_ACCESS_KEY }}
        BUCKET_NAME: ${{ secrets.BUCKET_NAME }}
        SECRET_DIR: src/main/resources
        FILE_NAME: application-aws.properties
      run: |
        echo "cloud.aws.credentials.access-key=$AWS_ACCESS_KEY" >> $SECRET_DIR/$FILE_NAME
        echo "cloud.aws.credentials.secret-key=$AWS_SECRET_KEY" >> $SECRET_DIR/$FILE_NAME
        echo "cloud.aws.s3.bucket=$BUCKET_NAME" >> $SECRET_DIR/$FILE_NAME
        echo "cloud.aws.region.static=ap-northeast-2" >> $SECRET_DIR/$FILE_NAME
        echo "cloud.aws.stack.auto=false" >> $SECRET_DIR/$FILE_NAME
        
        echo "spring.datasource.driver-class-name=com.mysql.cj.jdbc.Driver" >> $SECRET_DIR/$FILE_NAME
        echo "spring.datasource.url=$AWS_RDS_URL" >> $SECRET_DIR/$FILE_NAME
        echo "spring.datasource.username=$AWS_RDS_USERNAME" >> $SECRET_DIR/$FILE_NAME
        echo "spring.datasource.password=$AWS_RDS_PASSWORD" >> $SECRET_DIR/$FILE_NAME
        
        
    - name: Grant execute permission for gradlew
      run: chmod +x ./gradlew
    
    - name: Build with Gradle
      run: ./gradlew build

    - name: Docker build 
      run: | 
        docker login -u ${{ secrets.DOCKER_ID }} -p ${{ secrets.DOCKER_PASSWORD }} 
        docker build -t spring-cicd . 
        docker tag svtcafe-cicd hyunsdb/svtcafe-cicd:${GITHUB_SHA::7}
        docker push hyunsdb/svtcafe-cicd:${GITHUB_SHA::7}
